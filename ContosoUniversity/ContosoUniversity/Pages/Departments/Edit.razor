@page "/departments/edit/{id:int}"
@inject IMediator _mediator
@inject NavigationManager  _navigationManager

<h2>Edit</h2>

<h4>Department</h4>
<hr />

<Loading When="Data == null">

    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@Data" OnValidSubmit="OnPostAsync">
                <FluentValidationValidator />
                <InputNumber @bind-Value="Data.Id" hidden="hidden" />
                <RowVersion @bind-Value="Data.RowVersion" />
                <FormBlock>
                    <Label @bind-Value="Data.Name" />
                    <InputText @bind-Value="Data.Name" />
                    <ValidationMessage For="() => Data.Name" />
                </FormBlock>
                <FormBlock>
                    <Label @bind-Value="Data.Budget" />
                    <InputNumber @bind-Value="Data.Budget" min="0" step="0.01" />
                    <ValidationMessage For="() => Data.Budget" />
                </FormBlock>
                <FormBlock>
                    <Label @bind-Value="Data.StartDate" />
                    <InputDate @bind-Value="Data.StartDate" />
                    <ValidationMessage For="() => Data.StartDate" />
                </FormBlock>
                <FormBlock>
                    <Label @bind-Value="Data.InstructorId" />
                    <InputSelectNumber @bind-Value="Data.InstructorId">
                        @foreach (var administrator in Data.Administrators)
                        {
                            <option value="@administrator.Id">@administrator.FullName</option>
                        }
                    </InputSelectNumber>
                    <ValidationMessage For="() => Data.InstructorId" />
                </FormBlock>
                <FormBlock>
                    <input type="submit" value="Save" class="btn btn-primary" />
                </FormBlock>
            </EditForm>
        </div>
    </div>

    <div>
        <a href="/departments">Back to List</a>
    </div>

</Loading>

@code {
    [Parameter]
    public int Id { get; set; }
    public Command Data { get; set; }

    protected override async Task OnInitializedAsync()
        => Data = await _mediator.Send(new Query { Id = Id });

    private async Task OnPostAsync()
    {
        await _mediator.Send(Data);

        _navigationManager.NavigateTo("/departments");
    }

    public class Query : IRequest<Command>
    {
        public int Id { get; set; }
    }

    public class Command : IRequest
    {
        public string Name { get; set; }

        public decimal? Budget { get; set; }

        public DateTime? StartDate { get; set; }

        public int? InstructorId { get; set; }
        public int Id { get; set; }
        public byte[] RowVersion { get; set; }

        public IEnumerable<Instructor> Administrators { get; set; }
    }

    public class Validator : AbstractValidator<Command>
    {
        public Validator()
        {
            RuleFor(m => m.Name)
                .Cascade(CascadeMode.StopOnFirstFailure)
                .NotNull()
                .Length(3, 50);
            RuleFor(m => m.Budget).NotNull();
            RuleFor(m => m.StartDate).NotNull();
            RuleFor(m => m.InstructorId).NotNull();
        }
    }

    public class MappingProfile : Profile
    {
        public MappingProfile() => CreateMap<Department, Command>().ReverseMap();
    }

    public class QueryHandler : IRequestHandler<Query, Command>
    {
        private readonly SchoolContext _db;
        private readonly IConfigurationProvider _configuration;

        public QueryHandler(SchoolContext db,
            IConfigurationProvider configuration)
        {
            _db = db;
            _configuration = configuration;
        }

        public async Task<Command> Handle(Query message, CancellationToken token)
        {
            var command = await _db
                .Departments
                .Where(d => d.Id == message.Id)
                .ProjectTo<Command>(_configuration)
                .SingleOrDefaultAsync(token);

            command.Administrators = await _db.Instructors.ToArrayAsync(token);

            return command;
        }

        public class CommandHandler : IRequestHandler<Command>
        {
            private readonly SchoolContext _db;
            private readonly IMapper _mapper;

            public CommandHandler(SchoolContext db, IMapper mapper)
            {
                _db = db;
                _mapper = mapper;
            }

            public async Task<Unit> Handle(Command message, CancellationToken token)
            {
                var dept =
                    await _db.Departments.FindAsync(message.Id);

                _mapper.Map(message, dept);

                return default;
            }
        }
    }
}