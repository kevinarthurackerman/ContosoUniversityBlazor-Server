@page "/departments/delete/{id:int}"
@inject IMediator _mediator
@inject NavigationManager  _navigationManager

<h2>Delete</h2>

<h3>Are you sure you want to delete this?</h3>

<Loading When="Data == null">

    <div>
        <h4>Department</h4>
        <hr />
        <dl class="dl-horizontal">
            <dt>
                <Label For="() => Data.Name" />
            </dt>
            <dd>
                @Data.Name
            </dd>
            <dt>
                <Label For="() => Data.Budget" />
            </dt>
            <dd>
                @Data.Budget.ToString("C")
            </dd>
            <dt>
                <Label For="() => Data.StartDate" />
            </dt>
            <dd>
                @Data.StartDate.ToString("d")
            </dd>
            <dt>
                <Label For="() => Data.AdministratorFullName" />
            </dt>
            <dd>
                @Data.AdministratorFullName
            </dd>
        </dl>

        <div>
            <input type="submit" value="Delete" class="btn btn-danger" @onclick="OnPostAsync" /> |
            <a href="/departments">Back to List</a>
        </div>
    </div>

 </Loading>

@code {
    [Parameter]
    public int Id { get; set; }

    public Command Data { get; set; }

    protected override async Task OnInitializedAsync()
        => Data = await _mediator.Send(new Query { Id = Id });

    private async Task OnPostAsync()
    {
        await _mediator.Send(Data);

        _navigationManager.NavigateTo("/departments");
    }

    public class Query : IRequest<Command>
    {
        public int Id { get; set; }
    }

    public class Command : IRequest
    {
        public string Name { get; set; }

        public decimal Budget { get; set; }

        public DateTime StartDate { get; set; }

        public int Id { get; set; }

        [Display(Name = "Administrator")]
        public string AdministratorFullName { get; set; }

        public byte[] RowVersion { get; set; }
    }

    public class MappingProfile : Profile
    {
        public MappingProfile() => CreateMap<Department, Command>()
            .ForMember(
                dest => dest.AdministratorFullName, 
                opt => opt.MapFrom(src => src.Instructor.FullName)
            );
    }

    public class QueryHandler : IRequestHandler<Query, Command>
    {
        private readonly SchoolContext _db;
        private readonly IConfigurationProvider _configuration;

        public QueryHandler(SchoolContext db, IConfigurationProvider configuration)
        {
            _db = db;
            _configuration = configuration;
        }

        public async Task<Command> Handle(Query message, CancellationToken token) => await _db
            .Departments
            .Include(x => x.Instructor)
            .Where(d => d.Id == message.Id)
            .ProjectTo<Command>(_configuration)
            .SingleOrDefaultAsync(token);
    }

    public class CommandHandler : IRequestHandler<Command>
    {
        private readonly SchoolContext _db;

        public CommandHandler(SchoolContext db) => _db = db;

        public async Task<Unit> Handle(Command message, CancellationToken token)
        {
            var department = await _db.Departments.FindAsync(message.Id);

            _db.Departments.Remove(department);

            return default;
        }
    }
}