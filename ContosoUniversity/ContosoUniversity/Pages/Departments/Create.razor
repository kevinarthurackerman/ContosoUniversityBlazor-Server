@page "/departments/create"
@inject IMediator _mediator
@inject NavigationManager  _navigationManager

<h2>Create</h2>

<h4>Department</h4>
<hr />

<Loading When="Data == null">

    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@Data" method="post">
                <ValidationSummary />
                <FormBlock>
                    <Label For="() => Data.Name" />
                    <InputText @bind-Value="Data.Name" />
                </FormBlock>
                <FormBlock>
                    <Label For="() => Data.Budget" />
                    <InputNumber @bind-Value="Data.Budget" />
                </FormBlock>
                <FormBlock>
                    <Label For="() => Data.StartDate" />
                    <InputDate @bind-Value="Data.StartDate" />
                </FormBlock>
                <FormBlock>
                    <Label For="() => Data.AdministratorId" />
                    <InputSelect @bind-Value="Data.AdministratorId">
                        @foreach (var administrator in Data.Administrators)
                        {
                            <option value="@administrator.Id">@administrator.FullName</option>
                        }
                    </InputSelect>
                </FormBlock>
                <FormBlock>
                    <input type="submit" value="Create" class="btn btn-primary" @onclick="OnPostAsync" />
                </FormBlock>
            </EditForm>
        </div>
    </div>

    <div>
        <a href="/departments">Back to List</a>
    </div>

 </Loading>

@code {
    public Command Data { get; set; }

    private async Task OnPostAsync()
    {
        await _mediator.Send(Data);

        _navigationManager.NavigateTo("/departments");
    }

    protected override async Task OnInitializedAsync() => Data = await _mediator.Send(new Query());

    public class Query : IRequest<Command> { }

    public class QueryHandler : IRequestHandler<Query, Command>
    {
        private readonly SchoolContext _db;
        private readonly IMapper _mapper;

        public QueryHandler(SchoolContext db, IMapper mapper)
        {
            _db = db;
            _mapper = mapper;
        }

        public async Task<Command> Handle(Query message, CancellationToken token)
        {
            var administrators = await _db.Instructors.ToArrayAsync();

            return new Command { Administrators = administrators };
        }
    }

    public class Validator : AbstractValidator<Command>
    {
        public Validator()
        {
            RuleFor(m => m.Name).NotNull().Length(3, 50);
            RuleFor(m => m.Budget).NotNull();
            RuleFor(m => m.StartDate).NotNull();
            RuleFor(m => m.AdministratorId).NotNull();
        }
    }

    public class MappingProfiler : Profile
    {
        public MappingProfiler() => CreateMap<Command, Department>(MemberList.Source);
    }

    public class Command : IRequest<int>
    {
        [StringLength(50, MinimumLength = 3)]
        public string Name { get; set; }

        [DataType(DataType.Currency)]
        public decimal? Budget { get; set; }

        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime? StartDate { get; set; }

        [DisplayName("Administrator")]
        public int? AdministratorId { get; set; }

        public IEnumerable<Instructor> Administrators { get; set; }
    }

    public class CommandHandler : IRequestHandler<Command, int>
    {
        private readonly SchoolContext _context;
        private readonly IMapper _mapper;

        public CommandHandler(SchoolContext context, IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }

        public async Task<int> Handle(Command message, CancellationToken token)
        {
            var department = _mapper.Map<Command, Department>(message);

            _context.Departments.Add(department);

            await _context.SaveChangesAsync(token);

            return department.Id;
        }
    }
}