@page "/departments/details/{id:int}"
@inject IMediator _mediator

<h2>Details</h2>

<Loading When="Data == null">

    <div>
        <h4>Department</h4>
        <hr />
        <dl class="dl-horizontal">
            <dt>
                <Label @bind-Value="Data.Name" />
            </dt>
            <dd>
                @Data.Name
            </dd>
            <dt>
                <Label @bind-Value="Data.Budget" />
            </dt>
            <dd>
                @Data.Budget.ToString("C")
            </dd>
            <dt>
                <Label @bind-Value="Data.StartDate" />
            </dt>
            <dd>
                @Data.StartDate.ToString("d")
            </dd>
            <dt>
                <Label @bind-Value="Data.AdministratorFullName" />
            </dt>
            <dd>
                @Data.AdministratorFullName
            </dd>
        </dl>
    </div>
    <div>
        <a href="/departments/edit/@Data.Id">Edit</a> |
        <a href="/departments">Back to List</a>
    </div>

 </Loading>

@code {
    [Parameter]
    public int Id { get; set; }

    public Model Data { get; private set; }

    protected override async Task OnInitializedAsync()
        => Data = await _mediator.Send(new Query { Id = Id });

    public class Query : IRequest<Model>
    {
        public int Id { get; set; }
    }

    public class Model
    {
        public string Name { get; set; }

        public decimal Budget { get; set; }

        public DateTime StartDate { get; set; }

        public int Id { get; set; }

        [Display(Name = "Administrator")]
        public string AdministratorFullName { get; set; }
    }

    public class MappingProfile : Profile
    {
        public MappingProfile() => CreateMap<Department, Model>()
            .ForMember(
                dest => dest.AdministratorFullName, 
                opt => opt.MapFrom(src => src.Instructor.FullName)
            );
    }

    public class QueryHandler : IRequestHandler<Query, Model>
    {
        private readonly SchoolContext _context;
        private readonly IConfigurationProvider _configuration;

        public QueryHandler(SchoolContext context, IConfigurationProvider configuration)
        {
            _context = context;
            _configuration = configuration;
        }

        public Task<Model> Handle(Query message, CancellationToken token) =>
            _context.Departments
                .Include(x => x.Instructor)
                .Where(m => m.Id == message.Id)
                .ProjectTo<Model>(_configuration)
                .DecompileAsync()
                .SingleOrDefaultAsync(token);
    }
}