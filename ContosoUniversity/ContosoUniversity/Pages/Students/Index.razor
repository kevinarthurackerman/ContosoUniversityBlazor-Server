@page "/students"
@inject IMediator _mediator

    <h2>Index</h2>

<Loading When="Data == null">

    <p>
        <a href="/students/create">Create New</a>
    </p>

    <EditForm Model="@Data" method="get">
        <div class="form-actions no-color">
            <p>
                Find by name: <input type="text" name="SearchString" value="@Data.CurrentFilter" />
                <input type="submit" value="Search" class="btn btn-primary" /> |
                <a href="/students">Back to Full List</a>
            </p>
        </div>
    </EditForm>

    <table class="table">
        <thead>
            <tr>
                <th>
                    <a href="/students?sortOrder=@Data.NameSortParm&currentFilter=@Data.CurrentFilter">Last Name</a>
                </th>
                <th>
                    First Name
                </th>
                <th>
                    <a href="/students?sortOrder=@Data.DateSortParm&currentFilter=@Data.CurrentFilter">Enrollment Date</a>
                </th>
                <th>Enrollments Count</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Data.Results)
            {
                <tr>
                    <td>
                        <Display For="() => item.LastName" />
                    </td>
                    <td>
                        <Display For="() => item.FirstMidName" />
                    </td>
                    <td>
                        <Display For="() => item.EnrollmentDate" />
                    </td>
                    <td>
                        <Display For="() => item.EnrollmentsCount" />
                    </td>
                    <td>
                        <a href="/students/edit/@item.Id">Edit</a> |
                        <a href="students/details/@item.Id">Details</a> |
                        <a href="/students/delete/@item.Id">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @{
        var prevDisabled = !Data.Results.HasPreviousPage ? "disabled" : "";
        var nextDisabled = !Data.Results.HasNextPage ? "disabled" : "";
    }

    <a href="/students?sortOrder=@Data.CurrentSort&pageindex=@(Data.Results.PageIndex - 1)&currentFilter=@Data.CurrentFilter"
        class="btn btn-primary @prevDisabled">
        Previous
    </a>
    <a href="/students?sortOrder=@Data.CurrentSort&pageindex=@(Data.Results.PageIndex + 1)&currentFilter=@Data.CurrentFilter"
        class="btn btn-primary @nextDisabled">
        Next
    </a>

</Loading>

@code {
    [Parameter]
    public string SortOrder { get; set; }

    [Parameter]
    public string CurrentFilter { get; set; }

    [Parameter]
    public string SearchString { get; set; }

    [Parameter]
    public int? Page { get; set; }

    public Result Data { get; private set; }

    protected override async Task OnInitializedAsync()
        => Data = await _mediator.Send(new Query { CurrentFilter = CurrentFilter, Page = Page, SearchString = SearchString, SortOrder = SortOrder });

    public class Query : IRequest<Result>
    {
        public string SortOrder { get; set; }
        public string CurrentFilter { get; set; }
        public string SearchString { get; set; }
        public int? Page { get; set; }
    }

    public class Result
    {
        public string CurrentSort { get; set; }
        public string NameSortParm { get; set; }
        public string DateSortParm { get; set; }
        public string CurrentFilter { get; set; }
        public string SearchString { get; set; }

        public PaginatedList<Model> Results { get; set; }
    }

    public class Model
    {
        public int Id { get; set; }
        [Display(Name = "First Name")]
        public string FirstMidName { get; set; }
        public string LastName { get; set; }
        public DateTime EnrollmentDate { get; set; }
        public int EnrollmentsCount { get; set; }
    }

    public class MappingProfile : Profile
    {
        public MappingProfile() => CreateMap<Student, Model>();
    }

    public class QueryHandler : IRequestHandler<Query, Result>
    {
        private readonly SchoolContext _db;
        private readonly IConfigurationProvider _configuration;

        public QueryHandler(SchoolContext db, IConfigurationProvider configuration)
        {
            _db = db;
            _configuration = configuration;
        }

        public async Task<Result> Handle(Query message, CancellationToken token)
        {
            var model = new Result
            {
                CurrentSort = message.SortOrder,
                NameSortParm = String.IsNullOrEmpty(message.SortOrder) ? "name_desc" : "",
                DateSortParm = message.SortOrder == "Date" ? "date_desc" : "Date"
            };

            if (message.SearchString != null)
            {
                message.Page = 1;
            }
            else
            {
                message.SearchString = message.CurrentFilter;
            }

            model.CurrentFilter = message.SearchString;
            model.SearchString = message.SearchString;

            IQueryable<Student> students = _db.Students;
            if (!String.IsNullOrEmpty(message.SearchString))
            {
                students = students.Where(s => s.LastName.Contains(message.SearchString)
                                               || s.FirstMidName.Contains(message.SearchString));
            }
            switch (message.SortOrder)
            {
                case "name_desc":
                    students = students.OrderByDescending(s => s.LastName);
                    break;
                case "Date":
                    students = students.OrderBy(s => s.EnrollmentDate);
                    break;
                case "date_desc":
                    students = students.OrderByDescending(s => s.EnrollmentDate);
                    break;
                default: // Name ascending
                    students = students.OrderBy(s => s.LastName);
                    break;
            }

            int pageSize = 3;
            int pageNumber = message.Page ?? 1;
            model.Results = await students
                //.Select(src => new Model
                //{
                //    ID = src.Id,
                //    FirstMidName = src.FirstMidName,
                //    LastName = src.LastName,
                //    EnrollmentsCount = src.Enrollments.Count(),
                //    EnrollmentDate = src.EnrollmentDate
                //})
                .ProjectTo<Model>(_configuration)
                .PaginatedListAsync(pageNumber, pageSize);

            return model;
        }
    }
}