@page "/students"
@inject IMediator _mediator
@inject NavigationManager _navigationManager;

<h2>Index</h2>

<Loading When="_data == null">

    <p>
        <a href="/students/create">Create New</a>
    </p>

    <div class="form-actions no-color">
        <p>
            Find by name: <input type="text" name="SearchString" @bind="_currentSearchString" />
            <button class="btn btn-primary" @onclick="SearchButtonClicked" >Search</button> |
            <a href="" @onclick="BackToFullListClicked">Back to Full List</a>
        </p>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>
                    <a href="" @onclick="NameHeaderClicked"><Label For="() => _data.Results[0].LastName" /></a>
                </th>
                <th>
                    <Label For="() => _data.Results[0].FirstMidName" />
                </th>
                <th>
                    <a href="" @onclick="DateHeaderClicked"><Label For="() => _data.Results[0].EnrollmentDate" /></a>
                </th>
                <th>
                    <Label For="() => _data.Results[0].EnrollmentsCount" />
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _data.Results)
            {
                <tr>
                    <td>
                        @item.LastName
                    </td>
                    <td>
                        @item.FirstMidName
                    </td>
                    <td>
                        @item.EnrollmentDate.ToString("d")
                    </td>
                    <td>
                        @item.EnrollmentsCount
                    </td>
                    <td>
                        <a href="/students/edit/@item.Id">Edit</a> |
                        <a href="students/details/@item.Id">Details</a> |
                        <a href="/students/delete/@item.Id">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @{
        var prevDisabled = !_data?.Results.HasPreviousPage ?? false ? "disabled" : "";
        var nextDisabled = !_data?.Results.HasNextPage ?? false ? "disabled" : "";
    }

    <a href="" class="btn btn-primary @prevDisabled" @onclick="PreviousClicked">
        Previous
    </a>
    <a href="" class="btn btn-primary @nextDisabled" @onclick="NextClicked">
        Next
    </a>

</Loading>

@code {
    private string _currentSortOrder;

    private string _currentSearchString;

    public Result _data;

    protected override Task OnInitializedAsync()
    {
        var queryParams = GetQueryParams();
        if(queryParams.TryGetValue("sortOrder", out var sortOrder)) _currentSortOrder = sortOrder.FirstOrDefault();
        if(queryParams.TryGetValue("searchString", out var searchString)) _currentSearchString = searchString.FirstOrDefault();
        queryParams.TryGetValue("page", out var page);
        var pageParam = int.TryParse(page.FirstOrDefault(), out var parsedPage) ? (int?)parsedPage : null;

        return Search(sortOrder.FirstOrDefault(), searchString.FirstOrDefault(), pageParam);

        IDictionary<string,StringValues> GetQueryParams()
        {
            var uri = new Uri(_navigationManager.Uri);
            return QueryHelpers.ParseNullableQuery(uri.Query) ?? new Dictionary<string, StringValues>();
        }
    }

    private Task SearchButtonClicked() => SearchAndUpdateUrl(_currentSortOrder, _currentSearchString, null);

    private Task NameHeaderClicked()
    {
        _currentSortOrder = _currentSortOrder == "name" ? "name_desc" : "name";
        return SearchAndUpdateUrl(_currentSortOrder, _currentSearchString, _data?.Results.PageIndex);
    }

    private Task DateHeaderClicked()
    {
        _currentSortOrder = _currentSortOrder == "date" ? "date_desc" : "date";
        return SearchAndUpdateUrl(_currentSortOrder, _currentSearchString, _data.Results.PageIndex);
    }

    private Task PreviousClicked() =>
        SearchAndUpdateUrl(_currentSortOrder, _currentSearchString, _data.Results.PageIndex - 1);

    private Task NextClicked() =>
        SearchAndUpdateUrl(_currentSortOrder, _currentSearchString, _data.Results.PageIndex + 1);

    private async Task BackToFullListClicked()
    {
        _currentSortOrder = null;
        _currentSearchString = null;
        await SearchAndUpdateUrl(_currentSortOrder, _currentSearchString, null);
    }

    private async Task Search(string sortOrder, string searchString, int? page)
    {
        _data = await _mediator.Send(new Query { SortOrder = _currentSortOrder, SearchString = _currentSearchString, Page = page });
    }

    private void UpdateUrl(string sortOrder, string searchString, int? page)
    {
        var queryParams = new (string ParamName, string Value)[]
            {
                ("sortOrder", sortOrder),
                ("searchString", searchString),
                ("page", page?.ToString())
            }
            .Where(x => x.Value != null)
            .ToDictionary(x => x.ParamName, x => x.Value);

        var uri = new Uri(_navigationManager.Uri).AbsolutePath;

        _navigationManager.NavigateTo(QueryHelpers.AddQueryString(uri, queryParams));
    }

    private Task SearchAndUpdateUrl(string sortOrder, string searchString, int? page)
    {
        UpdateUrl(sortOrder, searchString, page);
        return Search(sortOrder, searchString, page);
    }

    public class Query : IRequest<Result>
    {
        public string SortOrder { get; set; }
        public string SearchString { get; set; }
        public int? Page { get; set; }
    }

    public class Result
    {
        public PaginatedList<Model> Results { get; set; }
    }

    public class Model
    {
        public int Id { get; set; }
        [Display(Name = "First Name")]
        public string FirstMidName { get; set; }
        public string LastName { get; set; }
        public DateTime EnrollmentDate { get; set; }
        public int EnrollmentsCount { get; set; }
    }

    public class MappingProfile : Profile
    {
        public MappingProfile() => CreateMap<Student, Model>();
    }

    public class QueryHandler : IRequestHandler<Query, Result>
    {
        private readonly SchoolContext _db;
        private readonly IConfigurationProvider _configuration;
        private const int _pageSize = 3;

        public QueryHandler(SchoolContext db, IConfigurationProvider configuration)
        {
            _db = db;
            _configuration = configuration;
        }

        public async Task<Result> Handle(Query message, CancellationToken token)
        {
            IQueryable<Student> students = _db.Students;

            if (!String.IsNullOrEmpty(message.SearchString))
            {
                students = students.Where(s => s.LastName.Contains(message.SearchString) || s.FirstMidName.Contains(message.SearchString));
            }

            switch (message.SortOrder)
            {
                case "name_desc":
                    students = students.OrderByDescending(s => s.LastName);
                    break;
                case "date":
                    students = students.OrderBy(s => s.EnrollmentDate);
                    break;
                case "date_desc":
                    students = students.OrderByDescending(s => s.EnrollmentDate);
                    break;
                default: // Name ascending
                    students = students.OrderBy(s => s.LastName);
                    break;
            }

            int pageNumber = message.Page ?? 1;

            var model = new Result();
            model.Results = await students
                //.Select(src => new Model
                //{
                //    ID = src.Id,
                //    FirstMidName = src.FirstMidName,
                //    LastName = src.LastName,
                //    EnrollmentsCount = src.Enrollments.Count(),
                //    EnrollmentDate = src.EnrollmentDate
                //})
                .ProjectTo<Model>(_configuration)
                .PaginatedListAsync(pageNumber, _pageSize);

            return model;
        }
    }
}