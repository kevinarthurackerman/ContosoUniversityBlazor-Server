@page "/students/edit/{id:int}"
@inject IMediator _mediator
@inject NavigationManager  _navigationManager

<h2>Edit</h2>

<h4>Student</h4>
<hr />

<Loading When="Data == null">

    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@Data" OnValidSubmit="OnPostAsync">
                <FluentValidationValidator />
                <InputNumber @bind-Value="Data.Id" hidden="hidden"/>
                <FormBlock>
                    <Label For="() => Data.LastName" />
                    <InputText @bind-Value="Data.LastName" />
                    <ValidationMessage For="() => Data.LastName" />
                </FormBlock>
                <FormBlock>
                    <Label For="() => Data.FirstMidName" />
                    <InputText @bind-Value="Data.FirstMidName" />
                    <ValidationMessage For="() => Data.FirstMidName" />
                </FormBlock>
                <FormBlock>
                    <Label For="() => Data.EnrollmentDate" />
                    <InputDate @bind-Value="Data.EnrollmentDate" />
                    <ValidationMessage For="() => Data.EnrollmentDate" />
                </FormBlock>
                <div class="form-group">
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>
            </EditForm>
        </div>
    </div>

    <div>
        <a href="/students">Back to List</a>
    </div>

</Loading>

@code {
    [Parameter]
    public int Id { get; set; }

    public Command Data { get; set; }

    protected override async Task OnInitializedAsync()
        => Data = await _mediator.Send(new Query { Id = Id });

    private async Task OnPostAsync()
    {
        await _mediator.Send(Data);

        _navigationManager.NavigateTo("/students");
    }

    public class Query : IRequest<Command>
    {
        public int? Id { get; set; }
    }

    public class QueryValidator : AbstractValidator<Query>
    {
        public QueryValidator()
        {
            RuleFor(m => m.Id).NotNull();
        }
    }

    public class Command : IRequest
    {
        public int Id { get; set; }
        public string LastName { get; set; }

        [Display(Name = "First Name")]
        public string FirstMidName { get; set; }

        public DateTime? EnrollmentDate { get; set; }
    }

    public class Validator : AbstractValidator<Command>
    {
        public Validator()
        {
            RuleFor(m => m.LastName).NotNull().Length(1, 50);
            RuleFor(m => m.FirstMidName).NotNull().Length(1, 50);
            RuleFor(m => m.EnrollmentDate).NotNull();
        }
    }

    public class MappingProfile : Profile
    {
        public MappingProfile() => CreateMap<Student, Command>().ReverseMap();
    }

    public class QueryHandler : IRequestHandler<Query, Command>
    {
        private readonly SchoolContext _db;
        private readonly IConfigurationProvider _configuration;

        public QueryHandler(SchoolContext db, IConfigurationProvider configuration)
        {
            _db = db;
            _configuration = configuration;
        }

        public async Task<Command> Handle(Query message, CancellationToken token) => await _db.Students
            .Where(s => s.Id == message.Id)
            .ProjectTo<Command>(_configuration)
            .SingleOrDefaultAsync(token);
    }

    public class CommandHandler : IRequestHandler<Command>
    {
        private readonly SchoolContext _db;
        private readonly IMapper _mapper;

        public CommandHandler(SchoolContext db, IMapper mapper)
        {
            _db = db;
            _mapper = mapper;
        }

        public async Task<Unit> Handle(Command message, CancellationToken token)
        {
            _mapper.Map(message, await _db.Students.FindAsync(message.Id));

            return default;
        }
    }
}