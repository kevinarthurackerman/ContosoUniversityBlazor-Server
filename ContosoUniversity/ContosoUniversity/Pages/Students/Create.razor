@page "/students/create"
@inject IMediator _mediator
@inject NavigationManager  _navigationManager

<h2>Create</h2>

<h4>Student</h4>
<hr />

<Loading When="Data == null">

    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@Data" OnValidSubmit="OnPostAsync">
                <FluentValidationValidator />
                <FormBlock>
                    <Label @bind-Value="Data.LastName" />
                    <InputText @bind-Value="Data.LastName" />
                    <ValidationMessage For="() => Data.LastName"/>
                </FormBlock>
                <FormBlock>
                    <Label @bind-Value="Data.FirstMidName" />
                    <InputText @bind-Value="Data.FirstMidName" />
                    <ValidationMessage For="() => Data.FirstMidName" />
                </FormBlock>
                <FormBlock>
                    <Label @bind-Value="Data.EnrollmentDate" />
                    <InputDate @bind-Value="Data.EnrollmentDate" />
                    <ValidationMessage For="() => Data.EnrollmentDate" />
                </FormBlock>
                <FormBlock>
                    <button type="submit" class="btn btn-primary">Create</button>
                </FormBlock>
            </EditForm>
        </div>
    </div>

    <div>
        <a href="/Students">Back to List</a>
    </div>

</Loading>

@code {
    public Command Data { get; set; }

    protected override Task OnInitializedAsync()
    {
        Data = new Command();
        return Task.CompletedTask;
    }

    private async Task OnPostAsync()
    {
        await _mediator.Send(Data);

        _navigationManager.NavigateTo("/students");
    }

    public class MappingProfile : Profile
    {
        public MappingProfile() => CreateMap<Command, Student>(MemberList.Source);
    }

    public class Command : IRequest<int>
    {
        public string LastName { get; set; }

        [Display(Name = "First Name")]
        public string FirstMidName { get; set; }

        public DateTime? EnrollmentDate { get; set; }
    }

    public class Validator : AbstractValidator<Command>
    {
        public Validator()
        {
            RuleFor(m => m.LastName)
                .Cascade(CascadeMode.StopOnFirstFailure)
                .NotNull()
                .Length(1, 50);
            RuleFor(m => m.FirstMidName)
                .Cascade(CascadeMode.StopOnFirstFailure)
                .NotNull()
                .Length(1, 50);
            RuleFor(m => m.EnrollmentDate).NotNull();
        }
    }

    public class Handler : IRequestHandler<Command, int>
    {
        private readonly SchoolContext _db;
        private readonly IMapper _mapper;

        public Handler(SchoolContext db, IMapper mapper)
        {
            _db = db;
            _mapper = mapper;
        }

        public async Task<int> Handle(Command message, CancellationToken token)
        {
            var student = _mapper.Map<Command, Student>(message);

            _db.Students.Add(student);

            await _db.SaveChangesAsync(token);

            return student.Id;
        }
    }
}