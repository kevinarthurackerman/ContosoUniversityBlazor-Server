@page "/students/delete/{id:int}"
@inject IMediator _mediator
@inject NavigationManager  _navigationManager

<h2>Delete</h2>
<p class="text-danger">An error has occurred</p>

<h3>Are you sure you want to delete this?</h3>

<Loading When="Data == null">

    <div>
        <h4>Student</h4>
        <hr />
        <dl class="dl-horizontal">
            <dt>
                <Label For="() => Data.LastName" />
            </dt>
            <dd>
                @Data.LastName
            </dd>
            <dt>
                <Label For="() => Data.FirstMidName" />
            </dt>
            <dd>
                @Data.FirstMidName
            </dd>
            <dt>
                <Label For="() => Data.EnrollmentDate" />
            </dt>
            <dd>
                @Data.EnrollmentDate
            </dd>
        </dl>

        <EditForm Model="@Data" method="post">
            <InputNumber @bind-Value="Data.Id" hidden="hidden" />
            <input type="submit" value="Delete" class="btn btn-danger" @onclick="OnPostAsync" /> |
            <a href="/students">Back to List</a>
        </EditForm>
    </div>

</Loading>

@code {
    [Parameter]
    public int Id { get; set; }
    
    public Command Data { get; set; }

    protected override async Task OnInitializedAsync() =>
        Data = await _mediator.Send(new Query { Id = Id });

    private async Task OnPostAsync()
    {
        await _mediator.Send(Data);

        _navigationManager.NavigateTo("/students");
    }

    public class Query : IRequest<Command>
    {
        public int Id { get; set; }
    }

    public class Command : IRequest
    {
        public int Id { get; set; }
        [Display(Name = "First Name")]
        public string FirstMidName { get; set; }
        public string LastName { get; set; }
        public DateTime EnrollmentDate { get; set; }
    }

    public class MappingProfile : Profile
    {
        public MappingProfile() => CreateMap<Student, Command>();
    }

    public class QueryHandler : IRequestHandler<Query, Command>
    {
        private readonly SchoolContext _db;
        private readonly IConfigurationProvider _configuration;

        public QueryHandler(SchoolContext db, IConfigurationProvider configuration)
        {
            _db = db;
            _configuration = configuration;
        }

        public async Task<Command> Handle(Query message, CancellationToken token) => await _db
            .Students
            .Where(s => s.Id == message.Id)
            .ProjectTo<Command>(_configuration)
            .SingleOrDefaultAsync(token);
    }

    public class CommandHandler : IRequestHandler<Command>
    {
        private readonly SchoolContext _db;

        public CommandHandler(SchoolContext db) => _db = db;

        public async Task<Unit> Handle(Command message, CancellationToken token)
        {
            _db.Students.Remove(await _db.Students.FindAsync(message.Id));

            return default;
        }
    }
}