@page "/courses/delete/{id:int}"
@inject IMediator _mediator
@inject NavigationManager  _navigationManager

<h2>Delete</h2>

<h3>Are you sure you want to delete this?</h3>

<Loading When="Data == null">

    <div>
        <h4>Course</h4>
        <hr />
        <dl class="dl-horizontal">
            <dt>
                <Label @bind-Value="Data.Id" />
            </dt>
            <dd>
                @Data.Id
            </dd>
            <dt>
                <Label @bind-Value="Data.Title" />
            </dt>
            <dd>
                @Data.Title
            </dd>
            <dt>
                <Label @bind-Value="Data.Credits" />
            </dt>
            <dd>
                @Data.Credits
            </dd>
            <dt>
                <Label @bind-Value="Data.DepartmentName" />
            </dt>
            <dd>
                @Data.DepartmentName
            </dd>
        </dl>

        <div>
            <input type="submit" value="Delete" class="btn btn-danger" @onclick="OnPostAsync" /> |
            <a href="/courses">Back to List</a>
        </div>
    </div>

</Loading>

@code {
    [Parameter]
    public int Id { get; set; }

    public Command Data { get; set; }

    protected override async Task OnInitializedAsync() => Data = await _mediator.Send(new Query { Id = Id });

    private async Task OnPostAsync()
    {
        await _mediator.Send(Data);

        _navigationManager.NavigateTo("/courses");
    }

    public class Query : IRequest<Command>
    {
        public int? Id { get; set; }
    }

    public class QueryValidator : AbstractValidator<Query>
    {
        public QueryValidator()
        {
            RuleFor(m => m.Id).NotNull();
        }
    }

    public class MappingProfile : Profile
    {
        public MappingProfile() => CreateMap<Course, Command>();
    }

    public class QueryHandler : IRequestHandler<Query, Command>
    {
        private readonly SchoolContext _db;
        private readonly IConfigurationProvider _configuration;

        public QueryHandler(SchoolContext db, IConfigurationProvider configuration)
        {
            _db = db;
            _configuration = configuration;
        }

        public Task<Command> Handle(Query message, CancellationToken token) =>
            _db.Courses
                .Where(c => c.Id == message.Id)
                .ProjectTo<Command>(_configuration)
                .SingleOrDefaultAsync(token);
    }

    public class Command : IRequest
    {
        [Display(Name = "Number")]
        public int Id { get; set; }
        public string Title { get; set; }
        public int Credits { get; set; }

        [Display(Name = "Department")]
        public string DepartmentName { get; set; }
    }

    public class CommandHandler : IRequestHandler<Command>
    {
        private readonly SchoolContext _db;

        public CommandHandler(SchoolContext db) => _db = db;

        public async Task<Unit> Handle(Command message, CancellationToken token)
        {
            var course = await _db.Courses.FindAsync(message.Id);

            _db.Courses.Remove(course);

            return default;
        }
    }
}