@page "/courses/create"
@inject IMediator _mediator
@inject NavigationManager  _navigationManager

<h2>Create</h2>

<h4>Course</h4>
<hr />

<Loading When="Data == null">

    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Data" OnValidSubmit="OnPostAsync">
                <FluentValidationValidator />
                <FormBlock>
                    <Label For="() => Data.Number" />
                    <InputNumber @bind-Value="Data.Number" />
                    <ValidationMessage For="() => Data.Number" />
                </FormBlock>
                <FormBlock>
                    <Label For="() => Data.Title" />
                    <InputText @bind-Value="Data.Title" />
                    <ValidationMessage For="() => Data.Title" />
                </FormBlock>
                <FormBlock>
                    <Label For="() => Data.Credits" />
                    <InputNumber @bind-Value="Data.Credits" />
                    <ValidationMessage For="() => Data.Credits" />
                </FormBlock>
                <FormBlock>
                    <Label For="() => Data.DepartmentId" />
                    <InputSelect @bind-Value="Data.DepartmentId">
                        @foreach (var department in Data.Departments)
                        {
                            <option value="@department.Id">@department.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Data.DepartmentId" />
                </FormBlock>
                <FormBlock>
                    <button type="submit" class="btn btn-primary">Create</button>
                </FormBlock>
            </EditForm>
        </div>
    </div>

    <div>
        <a href="/courses">Back to List</a>
    </div>

</Loading>

@code {
    public Command Data { get; set; }

    protected override async Task OnInitializedAsync() => Data = await _mediator.Send(new Query());

    public class Query : IRequest<Command> { }

    public class QueryHandler : IRequestHandler<Query, Command>
    {
        private readonly SchoolContext _db;

        public QueryHandler(SchoolContext db) => _db = db;

        public async Task<Command> Handle(Query message, CancellationToken token)
        {
            var departments = await _db.Departments.ToArrayAsync();

            return new Command { Departments = departments };
        }
    }

    private async Task OnPostAsync()
    {
        await _mediator.Send(Data);

        _navigationManager.NavigateTo("/courses");
    }

    public class Command : IRequest<int>
    {
        public int? Number { get; set; }
        public string Title { get; set; }
        public int? Credits { get; set; }
        [DisplayName("Department")]
        public int? DepartmentId { get; set; }

        public IEnumerable<Department> Departments { get; set; }
    }

    public class MappingProfile : Profile
    {
        public MappingProfile() => CreateMap<Command, Course>(MemberList.Source);
    }

    public class Validator : AbstractValidator<Command>
    {
        public Validator()
        {
            RuleFor(m => m.Number).NotNull();
            RuleFor(m => m.Title).NotNull();
            RuleFor(m => m.Credits).NotNull();
            RuleFor(m => m.DepartmentId).NotNull();
        }
    }

    public class CommandHandler : IRequestHandler<Command, int>
    {
        private readonly SchoolContext _db;
        private readonly IMapper _mapper;

        public CommandHandler(SchoolContext db, IMapper mapper)
        {
            _db = db;
            _mapper = mapper;
        }

        public async Task<int> Handle(Command message, CancellationToken token)
        {
            var course = _mapper.Map<Command, Course>(message);
            course.Id = message.Number.Value;

            _db.Courses.Add(course);

            await _db.SaveChangesAsync(token);

            return course.Id;
        }
    }
}