@page "/instructors/delete/{id:int}"
@inject IMediator _mediator
@inject NavigationManager  _navigationManager

<h2>Delete</h2>

<h3>Are you sure you want to delete this?</h3>

<Loading When="Data == null">

    <div>
        <h4>Instructor</h4>
        <hr />
        <dl class="dl-horizontal">
            <dt>
                <Label For="() => Data.LastName" />
            </dt>
            <dd>
                @Data.LastName
            </dd>
            <dt>
                <Label For="() => Data.FirstMidName" />
            </dt>
            <dd>
                @Data.FirstMidName
            </dd>
            <dt>
                <Label For="() => Data.HireDate" />
            </dt>
            <dd>
                @Data.HireDate.ToString("d")
            </dd>
        </dl>

        <EditForm Model="@Data" method="post">
            <InputNumber @bind-Value="Data.Id" hidden="hidden" />
            <input type="submit" value="Delete" class="btn btn-danger" @onclick="OnPostAsync" /> |
            <a href="/instructors">Back to List</a>
        </EditForm>
    </div>

</Loading>

@code {
    [Parameter]
    public int Id { get; set; }

    public Command Data { get; set; }

    protected override async Task OnInitializedAsync()
        => Data = await _mediator.Send(new Query { Id = Id });

    private async Task OnPostAsync()
    {
        await _mediator.Send(Data);

        _navigationManager.NavigateTo("/instructors");
    }

    public class Query : IRequest<Command>
    {
        public int? Id { get; set; }
    }

    public class Validator : AbstractValidator<Query>
    {
        public Validator()
        {
            RuleFor(m => m.Id).NotNull();
        }
    }

    public class Command : IRequest
    {
        public int? Id { get; set; }

        public string LastName { get; set; }
        [Display(Name = "First Name")]
        public string FirstMidName { get; set; }

        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}")]
        public DateTime HireDate { get; set; }

        [Display(Name = "Location")]
        public string OfficeAssignmentLocation { get; set; }
    }

    public class MappingProfile : Profile
    {
        public MappingProfile() => CreateMap<Instructor, Command>();
    }

    public class QueryHandler : IRequestHandler<Query, Command>
    {
        private readonly SchoolContext _db;
        private readonly IConfigurationProvider _configuration;

        public QueryHandler(SchoolContext db, IConfigurationProvider configuration)
        {
            _db = db;
            _configuration = configuration;
        }

        public Task<Command> Handle(Query message, CancellationToken token) => _db
            .Instructors
            .Where(i => i.Id == message.Id)
            .ProjectTo<Command>(_configuration)
            .SingleOrDefaultAsync(token);
    }

    public class CommandHandler : IRequestHandler<Command>
    {
        private readonly SchoolContext _db;

        public CommandHandler(SchoolContext db) => _db = db;

        public async Task<Unit> Handle(Command message, CancellationToken token)
        {
            Instructor instructor = await _db.Instructors
                .Include(i => i.OfficeAssignment)
                .Where(i => i.Id == message.Id)
                .SingleAsync(token);

            instructor.Handle(message);

            _db.Instructors.Remove(instructor);

            var department = await _db.Departments
                .Where(d => d.InstructorId == message.Id)
                .SingleOrDefaultAsync(token);
            if (department != null)
            {
                department.InstructorId = null;
            }

            return default;
        }
    }
}