@page "/instructors/{handler}"

@inject IMediator _mediator
@inject NavigationManager  _navigationManager

<h2>@(Data.Id == null ? "Create" : "Edit")</h2>

<h4>Instructor</h4>
<hr />

<Loading When="Data == null">

    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@Data" method="post">
                <ValidationSummary />
                <InputNumber @bind-Value="Data.Id" hidden="hidden" />
                <FormBlock>
                    <Label For="() => Data.LastName" />
                    <InputText @bind-Value="Data.LastName" />
                </FormBlock>
                <FormBlock>
                    <Label For="() => Data.FirstMidName" />
                    <InputText @bind-Value="Data.FirstMidName" />
                </FormBlock>
                <FormBlock>
                    <Label For="() => Data.HireDate" />
                    <InputDate @bind-Value="Data.HireDate" />
                </FormBlock>
                <FormBlock>
                    <Label For="() => Data.OfficeAssignmentLocation" />
                    <InputText @bind-Value="Data.OfficeAssignmentLocation" />
                </FormBlock>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <table>
                            <tr>
                                @{
                                    int cnt = 0;
                                    foreach (var course in Data.AssignedCourses)
                                    {
                                        if (cnt++ % 3 == 0)
                                        {
                                        @:</tr><tr>
                                        }
                                        <td>
                                            <label style="font-weight: normal">
                                                <input type="checkbox"
                                                       name="data.selectedCourses"
                                                       value="@course.CourseId"
                                                       @(course.Assigned ? "checked=\" checked\"" : "" ) />
                                                @course.CourseId :  @course.Title
                                            </label>
                                        </td>
                                    }
                                }
                            </tr>
                        </table>
                    </div>
                </div>
                <FormBlock>
                    <input type="submit" value="Save" class="btn btn-primary" />
                </FormBlock>
            </EditForm>
        </div>
    </div>

    <div>
        <a href="/instructors">Back to List</a>
    </div>

</Loading>

@code {
    public Command Data { get; set; }

    public async Task OnGetCreateAsync() => Data = await _mediator.Send(new Query());

    public async Task OnPostCreateAsync()
    {
        await _mediator.Send(Data);

        _navigationManager.NavigateTo("/instructors");
    }

    public async Task OnGetEditAsync(Query query) => Data = await _mediator.Send(query);

    private async Task OnPostEditAsync()
    {
        await _mediator.Send(Data);

        _navigationManager.NavigateTo("/instructors");
    }

    public class Query : IRequest<Command>
    {
        public int? Id { get; set; }
    }

    public class QueryValidator : AbstractValidator<Query>
    {
        public QueryValidator()
        {
            RuleFor(m => m.Id).NotNull();
        }
    }

    public class Command : IRequest<int>
    {
        public Command()
        {
            AssignedCourses = new List<AssignedCourseData>();
            CourseAssignments = new List<CourseAssignment>();
            SelectedCourses = new string[0];
        }

        public int? Id { get; set; }

        public string LastName { get; set; }
        [Display(Name = "First Name")]
        public string FirstMidName { get; set; }

        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}")]
        public DateTime? HireDate { get; set; }

        [Display(Name = "Location")]
        public string OfficeAssignmentLocation { get; set; }

        [IgnoreMap]
        public string[] SelectedCourses { get; set; }

        [IgnoreMap]
        public List<AssignedCourseData> AssignedCourses { get; set; }
        public List<CourseAssignment> CourseAssignments { get; set; }

        public class AssignedCourseData
        {
            public int CourseId { get; set; }
            public string Title { get; set; }
            public bool Assigned { get; set; }
        }

        public class CourseAssignment
        {
            public int CourseId { get; set; }
        }
    }

    public class CommandValidator : AbstractValidator<Command>
    {
        public CommandValidator()
        {
            RuleFor(m => m.LastName).NotNull().Length(0, 50);
            RuleFor(m => m.FirstMidName).NotNull().Length(0, 50);
            RuleFor(m => m.HireDate).NotNull();
        }
    }

    public class MappingProfile : Profile
    {
        public MappingProfile()
        {
            CreateMap<Instructor, Command>();
            CreateMap<CourseAssignment, Command.CourseAssignment>();
        }
    }

    public class QueryHandler : IRequestHandler<Query, Command>
    {
        private readonly SchoolContext _db;
        private readonly IConfigurationProvider _configuration;

        public QueryHandler(SchoolContext db, IConfigurationProvider configuration)
        {
            _db = db;
            _configuration = configuration;
        }

        public async Task<Command> Handle(Query message, CancellationToken token)
        {
            Command model;
            if (message.Id == null)
            {
                model = new Command();
            }
            else
            {
                model = await _db.Instructors
                    //.Include(m => m.CourseAssignments)
                    //.ThenInclude(ca => ca.Course)
                    .Where(i => i.Id == message.Id)
                    .ProjectTo<Command>(_configuration)
                    .SingleOrDefaultAsync(token);
            }

            PopulateAssignedCourseData(model);

            return model;
        }

        private void PopulateAssignedCourseData(Command model)
        {
            var allCourses = _db.Courses;
            var instructorCourses = new HashSet<int>(model.CourseAssignments.Select(c => c.CourseId));
            var viewModel = allCourses.Select(course => new Command.AssignedCourseData
            {
                CourseId = course.Id,
                Title = course.Title,
                Assigned = instructorCourses.Any() && instructorCourses.Contains(course.Id)
            }).ToList();
            model.AssignedCourses = viewModel;
        }

    }

    public class CommandHandler : IRequestHandler<Command, int>
    {
        private readonly SchoolContext _db;

        public CommandHandler(SchoolContext db) => _db = db;

        public async Task<int> Handle(Command message, CancellationToken token)
        {
            Instructor instructor;
            if (message.Id == null)
            {
                instructor = new Instructor();
                _db.Instructors.Add(instructor);
            }
            else
            {
                instructor = await _db.Instructors
                    .Include(i => i.OfficeAssignment)
                    .Include(i => i.CourseAssignments)
                    .Where(i => i.Id == message.Id)
                    .SingleAsync(token);
            }

            var courses = await _db.Courses.ToListAsync(token);

            instructor.Handle(message, courses);

            await _db.SaveChangesAsync(token);

            return instructor.Id;
        }
    }
}