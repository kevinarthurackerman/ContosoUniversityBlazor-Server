@page "/instructors/Create"
@page "/instructors/Edit/{id:int}"
@using HtmlTags.Reflection
@using Microsoft.EntityFrameworkCore.Internal

@inject IMediator _mediator
@inject NavigationManager  _navigationManager

<h2>@(Id == null ? "Create" : "Edit")</h2>

<h4>Instructor</h4>
<hr />

<Loading When="Data == null">

    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@Data" method="post">
                <ValidationSummary />
                <InputNumber @bind-Value="Data.Id" hidden="hidden" />
                <FormBlock>
                    <Label For="() => Data.LastName" />
                    <InputText @bind-Value="Data.LastName" />
                </FormBlock>
                <FormBlock>
                    <Label For="() => Data.FirstMidName" />
                    <InputText @bind-Value="Data.FirstMidName" />
                </FormBlock>
                <FormBlock>
                    <Label For="() => Data.HireDate" />
                    <InputDate @bind-Value="Data.HireDate" />
                </FormBlock>
                <FormBlock>
                    <Label For="() => Data.OfficeAssignmentLocation" />
                    <InputText @bind-Value="Data.OfficeAssignmentLocation" />
                </FormBlock>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <table>
                            <tbody>
                                @{
                                    var cnt = 0;
                                    foreach (var row in Data.Courses.GroupBy(x => cnt++ / 3))
                                    {
                                        <tr>
                                            @foreach (var course in row.AsEnumerable())
                                            {
                                                <td>
                                                    <label style="font-weight: normal">
                                                        <InputCheckbox @bind-Value="course.Assigned"></InputCheckbox>
                                                        @course.Id :  @course.Title
                                                    </label>
                                                </td>
                                            }
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <FormBlock>
                    <input type="submit" value="Save" class="btn btn-primary" @onclick="OnPostAsync" />
                </FormBlock>
            </EditForm>
        </div>
    </div>

    <div>
        <a href="/instructors">Back to List</a>
    </div>

</Loading>

@code {
    [Parameter]
    public int? Id { get; set; }

    public Command Data { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id == null) await OnGetCreateAsync();
        else await OnGetEditAsync(new Query {Id = Id});
    }

    protected async Task OnPostAsync()
    {
        if (Id == null) await OnPostCreateAsync();
        else await OnPostEditAsync();
    }

    public async Task OnGetCreateAsync() => Data = await _mediator.Send(new Query());

    public async Task OnPostCreateAsync()
    {
        await _mediator.Send(Data);

        _navigationManager.NavigateTo("/instructors");
    }

    public async Task OnGetEditAsync(Query query) => Data = await _mediator.Send(query);

    private async Task OnPostEditAsync()
    {
        await _mediator.Send(Data);

        _navigationManager.NavigateTo("/instructors");
    }

    public class Query : IRequest<Command>
    {
        public int? Id { get; set; }
    }

    public class QueryValidator : AbstractValidator<Query>
    {
        public QueryValidator()
        {
            RuleFor(m => m.Id).NotNull();
        }
    }

    public class Command : IRequest<int>
    {
        public int? Id { get; set; }

        public string LastName { get; set; }
        [Display(Name = "First Name")]
        public string FirstMidName { get; set; }

        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}")]
        public DateTime? HireDate { get; set; }

        [Display(Name = "Location")]
        public string OfficeAssignmentLocation { get; set; }

        [IgnoreMap]
        public List<CourseData> Courses { get; set; }

        public class CourseData
        {
            public int Id { get; set; }
            public string Title { get; set; }
            public bool Assigned { get; set; }
        }
    }

    public class CommandValidator : AbstractValidator<Command>
    {
        public CommandValidator()
        {
            RuleFor(m => m.LastName).NotNull().Length(0, 50);
            RuleFor(m => m.FirstMidName).NotNull().Length(0, 50);
            RuleFor(m => m.HireDate).NotNull();
        }
    }

    public class MappingProfile : Profile
    {
        public MappingProfile()
        {
            CreateMap<Instructor, Command>();
            CreateMap<Course, Command.CourseData>();
        }
    }

    public class QueryHandler : IRequestHandler<Query, Command>
    {
        private readonly SchoolContext _db;
        private readonly IConfigurationProvider _configuration;

        public QueryHandler(SchoolContext db, IConfigurationProvider configuration)
        {
            _db = db;
            _configuration = configuration;
        }

        public async Task<Command> Handle(Query message, CancellationToken token)
        {
            Command model;
            if (message.Id == null)
            {
                model = new Command {Courses = new List<Command.CourseData>()};
            }
            else
            {
                model = await _db.Instructors
                    .Where(i => i.Id == message.Id)
                    .ProjectTo<Command>(_configuration)
                    .SingleOrDefaultAsync(token);

                var assignedCourseIds = await _db.CourseAssignments
                    .Where(x => x.InstructorId == message.Id)
                    .Select(x => x.CourseId)
                    .ToArrayAsync(token);

                model.Courses = (await _db.Courses.ProjectToListAsync<Command.CourseData>(_configuration))
                    .Select(x =>
                    {
                        x.Assigned = assignedCourseIds.Contains(x.Id);
                        return x;
                    })
                    .ToList();
            }

            return model;
        }
    }

    public class CommandHandler : IRequestHandler<Command, int>
    {
        private readonly SchoolContext _db;

        public CommandHandler(SchoolContext db) => _db = db;

        public async Task<int> Handle(Command message, CancellationToken token)
        {
            Instructor instructor;
            if (message.Id == null)
            {
                instructor = new Instructor();
                _db.Instructors.Add(instructor);
            }
            else
            {
                instructor = await _db.Instructors
                    .Include(i => i.OfficeAssignment)
                    .Include(i => i.CourseAssignments)
                    .Where(i => i.Id == message.Id)
                    .SingleAsync(token);
            }

            instructor.Handle(message);

            await _db.SaveChangesAsync(token);

            return instructor.Id;
        }
    }
}